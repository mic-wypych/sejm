---
title: "votes"
output: quarto::html_vignette
vignette: >
  %\VignetteIndexEntry{votes}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
devtools::load_all()
library(sejm)
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(reactable)
library(stringr)
library(glue)
```



## votes table

```{r}
vote_df <- get_votes()

 bar_chart <- function(label, width = "100%", height = "1rem", fill = "#00bfc4", background = NULL) {
              bar <- div(style = list(background = fill, width = width, height = height, transition = "width 0.6s ease"))
              chart <- div(style = list(flexGrow = 1, marginLeft = "0.5rem", background = background), bar)
              div(style = list(display = "flex", alignItems = "center"), label, chart)
            }
      
      vote_df |>
        reactable(
          columns = list(
            yes = colDef(name = "yes votes", align = "left", cell = function(value) {
              width <- paste0(value / max(vote_df$yes) * 100, "%")
              bar_chart(value, width = width, fill = "#0081a7")
            }),
            abstain = colDef(name = "abstain votes", align = "left", cell = function(value) {
              width <- paste0(value / max(vote_df$abstain) * 100, "%")
              bar_chart(value, width = width, fill = "#8d99ae")}),
            no = colDef(name = "no votes", align = "left", cell = function(value) {
              width <- paste0(value / max(vote_df$no) * 100, "%")
              bar_chart(value, width = width, fill = "#780000")
            })
            
      ),
      filterable = TRUE)
```

## votes in time


```{r}
 vote_time_plot <- vote_df %>%
        mutate(date = as.Date(date)) %>%
        count(date) |>
        ggplot(aes(x = date, y = n, text = glue("data: {date}<br>votes: {n}"))) +
        geom_col(fill = "#780000", width = 1.5) +
        scale_x_date(date_breaks = "month") +
        theme_minimal() +
        labs(title = "Number of votes per day", y = "ilosć głosowań", x = NULL) +
        theme(axis.text.x = element_text(angle = 90),
            panel.grid = element_blank(),
            panel.grid.major.x = element_line(color = "grey80", linetype = "dashed"))

      ggplotly(vote_time_plot, tooltip = "text") %>%
        layout(
          hoverlabel = list(
            bgcolor = "white", 
            bordercolor = "black", 
            font = list(family = "Arial", size = 12)
          ),
          legend = list(orientation = "h", y = -0.1)
        )
```

## mps votes

How do we get a network of all votes

```{r}
library(widyr)
library(igraph)
library(ggraph)

mps_votes <- get_mp_votes()


vote_matrix <- mps_votes %>%
  unite("name", c("firstName", "lastName"), sep = " ") |>
  filter(vote %in% c("YES", "NO")) |>
  select(name, vote, vote_id, proc_id) |>
  pivot_wider(id_cols = vote_id:proc_id, names_from = "name", values_from = "vote")
  
agreement_results <- expand_grid(
  mp1 = mp_names,
  mp2 = mp_names
) %>%
  filter(mp1 != mp2) %>%  # Remove self-comparisons if desired
  rowwise() %>%
  mutate(
    agreement_rate = {
      votes1 <- vote_matrix[[mp1]]
      votes2 <- vote_matrix[[mp2]]
      # Only compare votes where both MPs voted
      valid_pairs <- !is.na(votes1) & !is.na(votes2)
      if(sum(valid_pairs) == 0) {
        NA_real_
      } else {
        sum(votes1[valid_pairs] == votes2[valid_pairs]) / sum(valid_pairs)
      }
    }
  ) %>%
  ungroup()

mps_votes <- mps_votes %>% 
  unite("name", c("firstName", "lastName"), sep = " ") |>
  select(name, club) %>%
  distinct(name, .keep_all = TRUE)

test_graph <- agreement_results |>
  inner_join(t, by = c("mp1"= "name")) %>%
  distinct(agreement_rate, .keep_all = TRUE) %>%
  filter(agreement_rate > .8) %>%
  graph_from_data_frame(directed = FALSE) %>% 
  ggraph(layout = "kk") + 
  geom_edge_link(aes(edge_alpha = agreement_rate, edge_color = club), alpha = .2) +
  #geom_node_point(aes(node_color = club)) +
  theme_void() +
  theme(plot.background = element_rect(fill = "white"))
#join with party
test_graph
```
---
title: "votes"
output: quarto::html_vignette
vignette: >
  %\VignetteIndexEntry{votes}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
devtools::load_all()
library(sejm)
library(tidyr)
library(dplyr)
library(ggplot2)
library(plotly)
library(reactable)
library(stringr)
library(glue)
```



## votes table

```{r}
vote_df <- get_votes()

 bar_chart <- function(label, width = "100%", height = "1rem", fill = "#00bfc4", background = NULL) {
              bar <- div(style = list(background = fill, width = width, height = height, transition = "width 0.6s ease"))
              chart <- div(style = list(flexGrow = 1, marginLeft = "0.5rem", background = background), bar)
              div(style = list(display = "flex", alignItems = "center"), label, chart)
            }
      
      vote_df |>
        reactable(
          columns = list(
            yes = colDef(name = "yes votes", align = "left", cell = function(value) {
              width <- paste0(value / max(vote_df$yes) * 100, "%")
              bar_chart(value, width = width, fill = "#0081a7")
            }),
            abstain = colDef(name = "abstain votes", align = "left", cell = function(value) {
              width <- paste0(value / max(vote_df$abstain) * 100, "%")
              bar_chart(value, width = width, fill = "#8d99ae")}),
            no = colDef(name = "no votes", align = "left", cell = function(value) {
              width <- paste0(value / max(vote_df$no) * 100, "%")
              bar_chart(value, width = width, fill = "#780000")
            })
            
      ),
      filterable = TRUE)
```

## votes in time


```{r}
 vote_time_plot <- vote_df %>%
        count(date) |>
        ggplot(aes(x = date, y = n, text = glue("data: {date}<br>votes: {n}"))) +
        geom_col(fill = "#780000", width = 1.5) +
        scale_x_date(date_breaks = "month") +
        theme_minimal() +
        labs(title = "Number of votes per day", y = "ilosć głosowań", x = NULL) +
        theme(axis.text.x = element_text(angle = 90),
            panel.grid = element_blank(),
            panel.grid.major.x = element_line(color = "grey80", linetype = "dashed"))

      ggplotly(vote_time_plot, tooltip = "text") %>%
        layout(
          hoverlabel = list(
            bgcolor = "white", 
            bordercolor = "black", 
            font = list(family = "Arial", size = 12)
          ),
          legend = list(orientation = "h", y = -0.1)
        )
```

## mps votes

How do we get a network of all votes

```{r}
library(widyr)
library(igraph)
library(ggraph)

mps_votes <- get_mp_votes()


pairwise_count(item, name, sort = TRUE, upper = FALSE) %>%
  graph_from_data_frame() %>% 
  ggraph(layout = "fr") + 
  geom_edge_link(aes(edge_alpha = n, edge_width = n), edge_colour = '#656d4a') +
  geom_node_point(size = 4, shape = 18, color = 'grey20') +
  geom_node_text(aes(label = name), repel = TRUE,
                 size = 9, family='Merriweather') +
  labs(title = 'Items in Alone Series',
       subtitle = 'The plot shows which items were most commonly taken together',
       caption = "#Tidytuesday 2023 Week 4 | data from Alone R package | @michal_wypych"
  ) +
  theme_void() +
  theme(text = element_text(family='Merriweather', size = 20, color = 'grey20'),
        plot.title = element_text(size = 80, family='Merriweather', hjust = .5),
        plot.subtitle =  element_text(size = 20, family='Merriweather', color = 'grey20', lineheight = .3, hjust = .5, margin = margin(0,0,20,0)),
        plot.caption = element_text(size = 10, family = "Merriweather", color = "grey60"),
        plot.background = element_rect(fill='#edede9'),
        legend.position = 'none',
        panel.grid = element_blank(),
        plot.margin = margin(20,20,20,20))


```